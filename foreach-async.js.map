{"version":3,"sources":["foreach-async.js"],"names":["module","exports","reduceAsync","arr","iteratee","done","Array","isArray","TypeError","array","_args","arguments","_arr","Object","_len","length","_index","_this","_iterator","n","call","_next"],"mappings":"AAAA;;;;AAEAA,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,QAA1B,EAAoCC,IAApC,CAAyC,aAAzC,EAAwD;;AAEvE;;;;;AAKA,MAAI,CAACC,MAAMC,OAAN,CAAcJ,GAAd,CAAL,EAAyB;AACvB,UAAM,IAAIK,SAAJ,CACJ,2DAA0DC,KAA1D,yCAA0DA,KAA1D,KAAkE,IAD9D,CAAN;AAED;;AAED;;;;;AAKA,MAAI,OAAOL,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAII,SAAJ,CACJ,iDAAgDJ,QAAhD,yCAAgDA,QAAhD,KAA2D,GADvD,CAAN;AAED;;AAED;;;;;AAKA,MAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAIG,SAAJ,CACJ,6CAA4CH,IAA5C,yCAA4CA,IAA5C,KAAmD,GAD/C,CAAN;AAED;;AAED;;;;;;AAMA,MAAIK,QAAQC,SAAZ;;AAEA;;;;;;AAMA,MAAIC,OAAOC,OAAOV,GAAP,CAAX;;AAEA;;;;;;;AAOA,MAAIW,OAAOF,KAAKG,MAAL,KAAgB,CAA3B;;AAEA;;;;;;;AAOA,MAAIC,SAAS,CAAb;;AAEA;;;;;;;AAOA,MAAIC,QAAS,YAAY;AACvB,QAAIP,MAAMK,MAAN,GAAe,CAAnB,EAAsB;AACpB,aAAOL,MAAM,CAAN,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GANY,EAAb;;AAQA;;;;;;;AAOA,WAASQ,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,QAAIA,IAAIL,IAAR,EAAc;AACZ,UAAIK,KAAKP,IAAT,EAAe;AACbR,iBAASgB,IAAT,CAAcH,KAAd,EAAqBL,KAAKO,CAAL,CAArB,EAA8BA,CAA9B,EAAiCP,IAAjC,EAAuCS,MAAMF,CAAN,CAAvC;AACD,OAFD,MAEO;AACLD,kBAAU,EAAEC,CAAZ;AACD;AACF,KAND,MAMO;AACLd;AACD;AACF;;AAED;;;;;;;;;AASA,WAASgB,KAAT,CAAeF,CAAf,EAAkB;AAChB,WAAO,YAAM;AACXD,gBAAU,EAAEC,CAAZ;AACD,KAFD;AAGD;;AAEDD,YAAUF,MAAV;AACD,CApHD","file":"foreach-async.js","sourcesContent":["'use strict';\n\nmodule.exports = function reduceAsync(arr, iteratee, done /*, thisArg*/) {\n\n  /**\n   * Validate that the first parameter is an array.\n   *\n   * @throws\n   */\n  if (!Array.isArray(arr)) {\n    throw new TypeError(\n      'Async reduce must be called on an array. Got \"' + typeof array + '\".');\n  }\n\n  /**\n   * Validate that the second parameter is a function.\n   *\n   * @throws\n   */\n  if (typeof iteratee !== 'function') {\n    throw new TypeError(\n      '\"iteratee\" must be a function. Got \"' + typeof iteratee + '\"');\n  }\n\n  /**\n   * Validate that the third parameter is a function.\n   *\n   * @throws\n   */\n  if (typeof done !== 'function') {\n    throw new TypeError(\n      '\"done\" must be a function. Got \"' + typeof done + '\"');\n  }\n\n  /**\n   * The reduceAsync arguments.\n   *\n   * @type {Array}\n   * @private\n   */\n  let _args = arguments;\n\n  /**\n   * The array to reduce.\n   *\n   * @type {Array}\n   * @private\n   */\n  let _arr = Object(arr);\n\n  /**\n   * The zero-fill right shifted length of the array. Ensures that the length\n   * of large arrays is always positive.\n   *\n   * @type {number}\n   * @private\n   */\n  let _len = _arr.length >>> 0;\n\n  /**\n   * The starting index.\n   *\n   * @type {number}\n   * @default 0\n   * @private\n   */\n  let _index = 0;\n\n  /**\n   * The value to use as `this` when executing the callback.\n   *\n   * @type {Object}\n   * @default null\n   * @private\n   */\n  let _this = (function () {\n    if (_args.length > 3) {\n      return _args[3];\n    } else {\n      return null;\n    }\n  }());\n\n  /**\n   * The reduction iterator function. Called by the \"_next\" function to make\n   * recusively iterative calls asynchronously.\n   *\n   * @param {number} n\n   * @private\n   */\n  function _iterator(n) {\n    if (n < _len) {\n      if (n in _arr) {\n        iteratee.call(_this, _arr[n], n, _arr, _next(n));\n      } else {\n        _iterator(++n);\n      }\n    } else {\n      done();\n    }\n  }\n\n  /**\n   * The reduction \"next\" handler. Updates the value of the reduction and makes\n   * another call to the iterator if the reduction is still in progress, or\n   * calls the \"done\" callback if the reduction has finished.\n   *\n   * @param {number} n\n   * @returns {Function}\n   * @private\n   */\n  function _next(n) {\n    return () => {\n      _iterator(++n);\n    };\n  }\n\n  _iterator(_index);\n};\n"],"sourceRoot":"/source/"}